<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnyanpasunode.github.io/news/article-85088.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>后端思维之数据库性能优化方案</title>
        <meta name="description" content="毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题。如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够" />
        <link rel="icon" href="/assets/website/img/clashnyanpasunode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Nyanpasu Node节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnyanpasunode.github.io/news/article-85088.htm" />
    <meta property="og:site_name" content="Clash Nyanpasu Node节点订阅站" />
    <meta property="og:title" content="后端思维之数据库性能优化方案" />
    <meta property="og:image" content="https://clashnyanpasunode.github.io/uploads/20240728-1/0ea47df7297f0df4f757a1d955c33503.webp" />
        <meta property="og:release_date" content="2025-03-31T08:39:15" />
    <meta property="og:updated_time" content="2025-03-31T08:39:15" />
        <meta property="og:description" content="毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题。如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="后端思维之数据库性能优化方案">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,600;1,700&family=Montserrat:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&family=Raleway:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/clashnyanpasunode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/clashnyanpasunode/main.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FW6BH5KXK9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FW6BH5KXK9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
    <header id="header" class="header d-flex align-items-center">
        <div class="container-fluid container-xl d-flex align-items-center justify-content-between">
            <a href="/" class="logo d-flex align-items-center xcblog-blog-logo">
                                <span><p>ClashNyanpasu<span>Node</span></p></span>
                            </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </nav><!-- .navbar -->
            <i class="mobile-nav-toggle mobile-nav-show bi bi-list"></i>
            <i class="mobile-nav-toggle mobile-nav-hide d-none bi bi-x"></i>
        </div>
    </header><!-- End Header -->
    <!-- End Header -->
    <!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <div class="breadcrumbs">
            <div class="page-header d-flex align-items-center" style="background-image: url('');">
                <div class="container position-relative">
                    <div class="row d-flex justify-content-center">
                        <div class="col-lg-6 text-center">
                            <h1>后端思维之数据库性能优化方案</h1>
                        </div>
                    </div>
                </div>
            </div>
            <nav>
                <div class="container">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </nav>
        </div><!-- End Breadcrumbs -->
        <!-- ======= About Us Section ======= -->
        <section id="about" class="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9 xcblog-blog-list">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p><strong>毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题</strong>。<strong>如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够快速准备解决咱么日常遇到的80%甚至90%的性能问题。</strong></p> <p><strong></strong>从解决问题的角度出发，我们得先了解到<strong>问题的原因；</strong>其次我们得有一套<strong>思考、判断问题的流程方式，</strong>让我们合理的站在哪个层面选择方案；最后从众多的方案里面选择一个适合的方案进行解决问题，<strong>找到一个合适的方案的前提是我们自己对各种方案之间的优缺点、场景有足够的了解</strong>，没有一个方案是完全可以通吃通用的，软件工程没有银弹。</p> <p>　　下文的我工作多年以来，曾经使用过的八大方案，结合了平常自己学习收集的一些资料，以系统、全面的方式整理成了这篇博文，也希望能让一些有需要的同行在工作上、成长上提供一定的帮助。</p> </h1> <table style="height: 212px; width: 519px; margin-left: auto; margin-right: auto" border="1" cellspacing="0" cellpadding="0"> <tbody> <tr> <td colspan="2" width="553"> <p align="center"><span style="font-size: 18px"><strong>慢的本质</strong></span></p> </td> </tr> <tr> <td style="text-align: center" rowspan="2" width="277"> <p>查找的时间复杂度</p> </td> <td style="text-align: center" valign="top" width="277"> <p>查找算法</p> </td> </tr> <tr> <td style="text-align: center" valign="top" width="277"> <p>存储数据结构</p> </td> </tr> <tr> <td style="text-align: center" valign="top" width="277"> <p>数据总量</p> </td> <td style="text-align: center" valign="top" width="277"> <p>数据拆分</p> </td> </tr> <tr> <td style="text-align: center" valign="top" width="277"> <p>高负载</p> </td> <td style="text-align: center" valign="top" width="277"> <p>CPU、磁盘繁忙</p> </td> </tr> </tbody> </table> <p>无论是关系型数据库还是NoSQL，任何存储系统决定于其查询性能的主要有三种：</p> <ul> <li><strong>查找的时间复杂度</strong></li> <li><strong>数据总量</strong></li> <li><strong>高负载</strong></li> </ul> <p>而决定于<strong>查找时间复杂度</strong>主要有两个因素：</p> <ul> <li><strong>查找算法</strong></li> <li><strong>存储数据结构</strong></li> </ul> <p>无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。</p> <p><strong>从关系型数据库角度出发，索引结构基本固定是B+Tree，时间复杂度是O(log n)，存储结构是行式存储。因此咱们对于关系数据库能优化的一般只有数据量。</strong></p> <p>而高负载造成原因有高并发请求、复杂查询等，导致CPU、磁盘繁忙等，而服务器资源不足则会导致慢查询等问题。该类型问题一般会选择集群、数据冗余的方式分担压力。</p> <p><img fetchpriority="high" decoding="async" src="http://img.555519.xyz/uploads3/20220510/c30fd5d185fd5e3df0dea5a52bfdc9d1.jpg" alt="后端思维之数据库性能优化方案"></p> </h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5f674c0fd5787e4795306a4a8cd5a978.jpg" alt="后端思维之数据库性能优化方案"></p> <p>　　从上图可见，自顶向下的一共有四层，分别是<strong>硬件、存储系统、存储结构、具体实现。层与层之间是紧密联系的，每一层的上层是该层的载体；因此越往顶层越能决定性能的上限，同时优化的成本也相对会比较高，性价比也随之越低</strong>。以最底层的具体实现为例，那么索引的<span style="font-family: &quot;Microsoft YaHei&quot;">优化的成本应该是最小的，可以说加了索引后无论是CPU消耗还是响应时间都是立竿见影降低；然而一个简单的语句，无论如何优化加索引也是有局限的，当在具体实现这层没有任何优化空间的时候就得往上一层【存储结构】思考，思考是否从物理表设计的层面出发优化（如分库分表、压缩数据量等），如果是文档型数据库得思考下文档聚合的结果；如果在存储结构这层优化得没效果，得继续往再上一次进行考虑，是否关系型数据库应该不适合用在现在得业务场景？如果要换存储，那么得换怎样得NoSQL?</span></p> <p>　　所以咱们优化的思路，出于性价比的优先考虑具体实现，实在没有优化空间了再往上一层考虑。当然如果公司有钱，直接使用钞能力，绕过了前面三层，这也是一种便捷的应急处理方式。</p> <p><strong>该篇文章不讨论顶与底的两个层面的优化，主要从存储结构、存储系统中间两层的角度出发进行探讨</strong>。</p> </h1> <div style="text-align: left" align="center"> <table style="width: 643px; height: 472px; margin-left: auto; margin-right: auto" border="1" cellspacing="0" cellpadding="0"> <tbody> <tr> <td colspan="5" valign="top" width="568"> <p style="text-align: center" align="center"><span style="font-size: 18px"><strong>方案总览</strong></span></p> </td> </tr> <tr> <td valign="top" width="144"> <p align="center"><span style="font-size: 18px"><strong>方案类型</strong></span></p> </td> <td valign="top" width="114"> <p align="center"><span style="font-size: 18px"><strong>方案描述</strong></span></p> </td> <td valign="top" width="92"> <p align="center"><span style="font-size: 18px"><strong>数据类型</strong></span></p> </td> <td valign="top" width="84"> <p align="center"><span style="font-size: 18px"><strong>收益类型</strong></span></p> </td> <td valign="top" width="134"> <p align="center"><span style="font-size: 18px"><strong>应对场景</strong></span></p> </td> </tr> <tr> <td rowspan="4" width="144"> <p align="center">减少数据量</p> </td> <td valign="top" width="114"> <p align="center">数据序列化存储</p> </td> <td valign="top" width="92"> <p align="center">静态数据</p> </td> <td valign="top" width="84"> <p align="center">短期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量</p> </td> </tr> <tr> <td valign="top" width="114"> <p align="center">数据归档</p> </td> <td valign="top" width="92"> <p align="center">动态数据</p> </td> <td valign="top" width="84"> <p align="center">中期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量</p> </td> </tr> <tr> <td valign="top" width="114"> <p align="center">中间表生成</p> </td> <td valign="top" width="92"> <p align="center">静态数据</p> </td> <td valign="top" width="84"> <p align="center">长期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量、高负载</p> </td> </tr> <tr> <td valign="top" width="114"> <p align="center">分库分表</p> </td> <td valign="top" width="92"> <p align="center">动态数据</p> </td> <td valign="top" width="84"> <p align="center">长期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量、高负载</p> </td> </tr> <tr> <td rowspan="2" width="144"> <p align="center">用空间换性能</p> </td> <td valign="top" width="114"> <p align="center">分布式缓存</p> </td> <td valign="top" width="92"> <p align="center">静态数据</p> </td> <td valign="top" width="84"> <p align="center">短期收益</p> </td> <td valign="top" width="134"> <p align="center">高负载</p> </td> </tr> <tr> <td valign="top" width="114"> <p align="center">一主多从</p> </td> <td valign="top" width="92"> <p align="center">动态数据</p> </td> <td valign="top" width="84"> <p align="center">中期收益</p> </td> <td valign="top" width="134"> <p align="center">高负载</p> </td> </tr> <tr> <td rowspan="2" width="144"> <p align="center">选择合适的存储系统</p> </td> <td valign="top" width="114"> <p align="center">CQRS</p> </td> <td valign="top" width="92"> <p align="center">动态数据</p> </td> <td valign="top" width="84"> <p align="center">长期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量、高负载</p> </td> </tr> <tr> <td valign="top" width="114"> <p align="center">更换存储系统</p> </td> <td valign="top" width="92"> <p align="center">动态数据</p> </td> <td valign="top" width="84"> <p align="center">长期收益</p> </td> <td valign="top" width="134"> <p align="center">大数据量、高负载</p> </td> </tr> </tbody> </table> <p style="text-align: left">　　数据库的优化方案核心本质有三种：<strong>减少数据量</strong>、<strong>用空间换性能</strong>、<strong>选择合适的存储系统，</strong>这也对应了开篇讲解的慢的三个原因<strong>：数据总量、高负载、<strong>查找的时间复杂度。</strong></strong></p> <p style="text-align: left"><strong><strong></strong></strong>这里大概解释下收益类型：短期收益，处理成本低，能紧急应对，久了则会有技术债务；长期收益则跟短期收益相反，短期内处理成本高，但是效果能长久使用，扩展性会更好。</p> <p style="text-align: left">　&nbsp; &nbsp; 静态数据意思是，相对改动频率比较低的，也无需过多联表的，where过滤比较少。动态数据与之相反，更新频率高，通过动态条件筛选过滤。</p> </h1> <p class="MsoNormal" style="text-indent: 21pt; text-align: left">减少数据量类型共有四种方案：<strong><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px">数据序列化存储、</span><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px">数据归档、</span><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px">中间表生成、</span><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px">分库分表。</span></strong></p> <p class="MsoNormal" style="text-indent: 21pt; text-align: left">就如上面所说的，无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（<span lang="EN-US">CPU</span>、磁盘读写繁忙）、耗时也会越来越高。目前市面上的<span lang="EN-US">NoSQL</span>基本上都支持分片存储，所以其天然分布式写的能力从数据量上能得到非常的解决方案。而关系型数据库，查找算法与存储结构是可以优化的空间比较少，因此咱们一般思考出发点只有从<strong>如何减少数据量</strong>的这个角度进行选择优化，因此本类型的优化方案主要针对<strong>关系型数据库</strong>进行处理。</p> </h1> <table style="width: 1134px; height: 125px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="352"> <col width="209"> <col width="284"> <col width="345"></colgroup> <tbody> <tr> <td class="oa1" colspan="4" width="1190" height="51"> <p style="text-align: center"><strong><span style="font-size: 16px">数据归档</span></strong></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="352" height="34"> <p><strong>做法</strong></p> </td> <td class="oa4" style="text-align: center" width="209"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="284"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="345"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" width="352" height="55"> <p>利用数据库作业，定时把历史数据移到历史表或者库</p> </td> <td class="oa6" style="text-align: center" width="209"> <p>局部的热点数据</p> </td> <td class="oa6" style="text-align: center" width="284"> <p>结构无需改动，少侵入性</p> </td> <td class="oa6" style="text-align: center" width="345"> <p>热点数据过多仍会导致性能问题</p> </td> </tr> </tbody> </table> <p class="MsoNormal" style="text-indent: 21pt; text-align: left"><span style="text-indent: 21pt"><span style="text-indent: 21pt"><br />　　注意点：别一次性迁移数量过多，建议低频率多次限量迁移。像MySQL由于删除数据后是不会释放空间的，可以执行命令OPTIMIZE TABLE释放存储空间，但是会锁表，如果存储空间还满足，可以不执行。</span><br />　　建议优先考虑该方案，主要通过数据库作业把非热点数据迁移到历史表，如果需要查历史数据，可新增业务入口路由到对应的历史表（库）。</span></p> <p class="MsoNormal" style="text-indent: 21pt"><span style="text-indent: 21pt"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f14af1e557f714153109b5d740c785db.jpg" alt="后端思维之数据库性能优化方案"></span></p> </h1> <table style="width: 1084px; height: 133px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="413"> <col width="278"> <col width="128"> <col width="386"></colgroup> <tbody> <tr> <td class="oa1" style="text-align: center" colspan="4" width="1204" height="47"> <p><span style="font-size: 16px"><strong>中间表(结果表)</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="413" height="30"> <p><strong>做法</strong></p> </td> <td class="oa4" style="text-align: center" width="278"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="128"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="386"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" width="413" height="50"> <p>通过调度任务定时，把某个业务以多个维度进行聚合分组</p> </td> <td class="oa6" style="text-align: center" width="278"> <p>报表型、排行榜等静态数据</p> </td> <td class="oa6" style="text-align: center" width="128"> <p>压缩比率大</p> </td> <td class="oa6" style="text-align: center" width="386"> <p>需要开发人员针对场景业务进行开发</p> </td> </tr> </tbody> </table> </div> <div style="text-align: left" align="center"></div> <div style="text-align: left" align="center">　　中间表（结果表）其实就是利用调度任务把复杂查询的结果跑出来存储到一张额外的物理表，因为这张物理表存放的是通过跑批汇总后的数据，因此可以理解成根据原有的业务进行了高度的数据压缩。以报表为例，如果一个月的源数据有数十万，我们通过调度任务以月的维度生成，那么等于把原有的数据压缩了几十万分之一；接下来的季报和年报可以根据月报*N来进行统计，以这种方式处理的数据，就算三年、五年甚至十年数据量都可以在接受范围之内，而且可以精确计算得到。</div> <div style="text-align: left" align="center">　　那么数据的压缩比率是否越低越好？下面有一段口诀：</div> <ul> <li style="text-align: left"><span style="text-indent: -21pt">字段越多，粒度越细，灵活性越高，可以以中间表进行不同业务联表处理。</span></li> <li style="text-align: left"><span style="text-indent: -21pt">字段越少，粒度越粗，灵活性越低，一般作为结果表查询出来。</span></li> </ul> </h1> <table style="width: 868px; height: 138px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="472"> <col width="428"> <col width="303"></colgroup> <tbody> <tr> <td class="oa1" colspan="4" width="1203" height="47"> <p style="text-align: center"><span style="font-size: 16px"><strong>数据序列化存储</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="472" height="30"> <p><strong>做法</strong></p> </td> <td class="oa4" style="text-align: center" width="428"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="303"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="303"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" width="472" height="53"> <p>把一对多的数据，通过序列化字符串存储</p> </td> <td class="oa6" style="text-align: center" width="428"> <p>不需要要求所有字段作为结构化存储</p> </td> <td class="oa6" style="text-align: center" width="303"> <p>压缩比率高</p> </td> <td class="oa6" style="text-align: center" width="303"> <p>序列化的字段无法联表</p> </td> </tr> </tbody> </table> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/276796e0a5ce5f2c9ea0b6a576951532.jpg" alt="后端思维之数据库性能优化方案"></p> <p>&nbsp; &nbsp; &nbsp; &nbsp;在数据库以序列化存储的方式，对于一些不需要结构化存储的业务来说是一种很好减少数据量的方式，特别是对于一些M*N的数据量的业务场景，如果以M作为主表优化，那么就可以把数据量维持最多是M的量级。另外像订单的地址信息，这种业务一般是不需要根据里面的字段检索出来，也比较适合。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;这种方案我认为属于一种临时性的优化方案，无论是从序列化后丢失了部份字段的查询能力，还是这方案的可优化性都是有限的。</p> </h1> <p>　　分库分表作为数据库优化的一种非常经典的优化方案，特别是在以前NoSQL还不是很成熟的年代，这个方案就如救命草一般的存在。</p> <p>　　如今也有不少同行也会选择这种优化方式，但是从我角度来看，分库分表是一种优化成本很大的方案。这里我有几个建议：</p> <ol> <li>分库分表是实在没有办法的办法，应放到最后选择。</li> <li>优先选择NoSQL代替，因为NoSQL诞生基本上为了扩展性与高性能。</li> <li>究竟分库还是分表？量大则分表，并发高则分库</li> <li>不考虑扩容，一部做到位。因为技术更新太快了，每3-5年一大变。</li> </ol> <h2>拆分方式</h2> <table style="width: 668px; height: 293px; margin-left: auto; margin-right: auto" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="750"> <col width="267"> <col width="750"></colgroup> <tbody> <tr> <td class="oa1" colspan="3" width="1767" height="36"> <p><strong><span style="font-size: 16px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 分库分表-拆分方式</span></strong></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="750" height="36"> <p><strong>拆分方式</strong></p> </td> <td class="oa4" style="text-align: center" width="267"> <p><strong>角度</strong></p> </td> <td class="oa4" style="text-align: center" width="750"> <p><strong>优点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="750" height="73"> <p>垂直拆分</p> </td> <td class="oa6" style="text-align: center" rowspan="2" width="267"> <p>按照业务拆分</p> </td> <td class="oa7" style="text-align: center" width="750"> <p>降低业务耦合度</p> </td> </tr> <tr> <td class="oa8" style="text-align: center" width="750" height="36"> <p>减少字段，物理页所拥有的行数则变多</p> </td> </tr> <tr> <td class="oa9" style="text-align: center" width="750" height="36"> <p>水平拆分</p> </td> <td class="oa7" style="text-align: center" width="267"> <p>从物理层面分片</p> </td> <td class="oa7" style="text-align: center" width="750"> <p>从根本上减少数据量</p> </td> </tr> </tbody> </table> <div style="text-align: left" align="center"> <p class="_mce_tagged_br">　　只要涉及到这个拆，那么无论是微服务也好，分库分表也好，拆分的方式主要分两种：<strong>垂直拆分、水平拆分</strong>。</p> <p class="_mce_tagged_br">　　垂直拆分更多是从<strong>业务角度</strong>进行拆分，主要是为了<strong>降低业务耦合度；</strong>此外以SQL Server为例，一页是8KB存储，如果在一张表里字段越多，一行数据自然占的空间就越大，那么一页数据所存储的行数就自然越少，那么每次查询所需要IO则越高因此性能自然也越慢；因此反之，减少字段也能很好提高性能。之前我听说某些同行的表有80个字段，几百万的数据就开始慢了。</p> <p class="_mce_tagged_br">　　水平拆分更多是从<strong>技术角度</strong>进行拆分，拆分后每张表的结构是一模一样的，简而言之就是把原有一张表的数据，通过<strong>技术手段</strong>进行分片到多张表存储，从根本上解决了数据量的问题。</p> <p class="_mce_tagged_br" style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f772fc378c1b8946edf838fc92d1ce39.jpg" alt="后端思维之数据库性能优化方案"><img loading="lazy" decoding="async" src="http://img.555519.xyz/uploads3/20220510/fc919137074dfc7f0ec59cd53fb9d4cd.jpg" alt="后端思维之数据库性能优化方案"></p> <h2 class="_mce_tagged_br">路由方式</h2> <table style="width: 794px; height: 401px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="423"> <col width="375"> <col width="1005"></colgroup> <tbody> <tr> <td class="oa1" colspan="3" width="1802" height="59"> <p style="text-align: center"><strong><span style="font-size: 16px">路由方式</span></strong></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="423" height="43"> <p><strong>算法</strong></p> </td> <td class="oa4" style="text-align: center" width="375"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="1005"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="423" height="86"> <p>区间范围</p> </td> <td class="oa6" style="text-align: center" rowspan="2" width="375"> <p>查询定位比较容易</p> </td> <td class="oa7" style="text-align: center" width="1005"> <p>容易造成数据不平均（热点数据）</p> </td> </tr> <tr> <td class="oa8" style="text-align: center" width="1005" height="43"> <p>容易忘记创建新表</p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="423" height="86"> <p>Hash</p> </td> <td class="oa6" style="text-align: center" rowspan="2" width="375"> <p>分片均匀</p> </td> <td class="oa7" style="text-align: center" width="1005"> <p>必须带分区键，不带分区键则会所有表都扫描一遍</p> </td> </tr> <tr> <td class="oa8" style="text-align: center" width="1005" height="43"> <p>分库情况下无法使用关系型数据库的特性（Join、聚合计算、分页）</p> </td> </tr> <tr> <td class="oa9" style="text-align: center" width="423" height="43"> <p>分片映射表</p> </td> <td class="oa7" style="text-align: center" width="375"> <p>补充方案</p> </td> <td class="oa7" style="text-align: center" width="1005"> <p>二次查询</p> </td> </tr> </tbody> </table> <p class="_mce_tagged_br">　　进行水平拆分后，根据分区键（sharding key）原来应该在同一张表的数据拆解写到不同的物理表里，那么查询也得根据分区键进行定位到对应的物理表从而把数据给查询出来。</p> <p class="_mce_tagged_br">　　路由方式一般有三种<strong>区间范围、Hash、分片映射表</strong>，每种路由方式都有自己的优点和缺点，可以根据对应的业务场景进行选择。</p> <p class="_mce_tagged_br"><strong>区间范围</strong>根据某个元素的区间的进行拆分，以时间为例子，假如有个业务我们希望以月为单位拆分那么表就会拆分像 table_2022-04，这种对于文档型、ElasticSearch这类型的NoSQL也适用，无论是定位查询，还是日后清理维护都是非常的方便的。那么缺点也明显，会因为业务独特性导致数据不平均，甚至不同区间范围之间的数据量差异很大。</p> <p class="_mce_tagged_br"><strong>Hash</strong>也是一种常用的路由方式，根据Hash算法取模以数据量均匀分别存储在物理表里，缺点是对于带分区键的查询依赖特别强，如果不带分区键就无法定位到具体的物理表导致相关所有表都查询一次，而且在分库的情况下对于Join、聚合计算、分页等一些RDBMS的特性功能还无法使用。</p> <p class="_mce_tagged_br" style="text-align: center"><img loading="lazy" decoding="async" src="http://img.555519.xyz/uploads3/20220510/3848bbe70295f05b5f9fce20f2d20309.jpg" alt="后端思维之数据库性能优化方案"></p> <p class="_mce_tagged_br">　　一般分区键就一个，假如有时候业务场景得用不是分区键的字段进行查询，那么难道就必须得全部扫描一遍？其实可以使用<strong>分片映射表</strong>的方式，简单来说就是额外有一张表记录额外字段与分区键的映射关系。举个例子，有张订单表，原本是以UserID作为分区键拆分的，现在希望用OrderID进行查询，那么得有额外得一张物理表记录了OrderID与UserID的映射关系。因此得先查询一次映射表拿到分区键，再根据分区键的值路由到对应的物理表查询出来。可能有些朋友会问，那这映射表是否多一个映射关系就多一张表，还是多个映射关系在同一张表。我优先建议单独处理，如果说映射表字段过多，那跟不进行水平拆分时的状态其实就是一致的，这又跑回去的老问题。</p> </h1> <p>　　该类型的两个方案都是用来应对高负载的场景，方案有以下两种：<strong>分布式缓存、一主多从。</strong></p> <p>　　与其说这个方案叫用空间换性能，我认为用空间换资源更加贴切一些。因此两个方案的本质主要通<strong>数据冗余、集群</strong>等方式分担负载压力。</p> <p>　　对于关系型数据库而言，因为他的ACID特性让它天生不支持写的分布式存储，<strong>但是它依然天然的支持分布式读</strong>。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7d68a046c9a18b3db75dc52444619c00.jpg" alt="后端思维之数据库性能优化方案"></p> </h1> <table style="width: 778px; height: 163px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="260"> <col width="443"> <col width="505"></colgroup> <tbody> <tr> <td class="oa1" colspan="3" width="1207" height="35"> <p style="text-align: center"><span style="font-size: 16px"><strong>分布式缓存</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="260" height="22"> <p><strong>做法</strong></p> </td> <td class="oa4" style="text-align: center" width="443"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="505"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="260" height="75"> <p>Cache Aside</p> </td> <td class="oa6" style="text-align: center" width="443"> <p>应对高并发读</p> </td> <td class="oa6" style="text-align: center" width="505"> <p>动态条件比较多的业务场景，缓存命中低</p> </td> </tr> <tr> <td class="oa7" style="text-align: center" width="443" height="38"> <p>伪静态数据（业务配置、低时效的数据）</p> </td> <td class="oa7" style="text-align: center" width="505"> <p>实时性要求高的数据场景，处理起来比较花功夫</p> </td> </tr> </tbody> </table> <p>　　缓存层级可以分好几种：<strong>客户端缓存</strong>、<strong>API服务本地缓存</strong>和<strong>分布式缓存</strong>，咱们这次只聊分布式缓存。一般我们选择分布式缓存系统都会优先选择NoSQL的键值型数据库，例如Memcached、Redis，如今Redis的数据结构多样性，高性能，易扩展性也逐渐占据了分布式缓存的主导地位。</p> <p>　　缓存策略也主要有很多种：<strong>Cache-Aside</strong>、<strong>Read/Wirte-Through</strong>、<strong>Write-Back</strong>，咱们用得比较多的方式主要<strong>Cache-Aside，</strong>具体流程可看下图：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4a023711758911f1fb2b5e87594c10ab.jpg" alt="后端思维之数据库性能优化方案"></p> <p style="text-align: center"> <p>&nbsp;我相信大家对分布式缓存相对都比较熟悉了，但是我在这里还是有几个注意点希望提醒一下大家：</p> <h2>避免滥用缓存</h2> <p><strong>缓存应该是按需使用，从28法则来看，80%的性能问题由主要的20%的功能引起</strong>。滥用缓存的后果会导致维护成本增大，而且有一些数据一致性的问题也不好定位。特别像一些动态条件的查询或者分页，key的组装是多样化的，量大又不好用keys指令去处理，当然我们可以用额外的一个key把记录数据的key以集合方式存储，删除时候做两次查询，先查Key的集合，然后再遍历Key集合把对应的内容删除。这一顿操作下来无疑是非常废功夫的，谁弄谁知道。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0f7b10c7495dff6dfe11d71e397220de.jpg" alt="后端思维之数据库性能优化方案"></p> <h2>避免缓存击穿</h2> <p>　　当缓存没有数据，就得跑去数据库查询出来，这就是<strong>缓存穿透</strong>。假如某个时间临界点数据是空的例如周排行榜，穿透过去的无论查找多少次数据库仍然是空，而且该查询消耗CPU相对比较高，并发一进来因为缺少了缓存层的对高并发的应对，这个时候就会<strong>因为并发导致数据库资源消耗过高</strong>，这就是<strong>缓存击穿</strong>。数据库资源消耗过高就会导致其他查询超时等问题。</p> <p>　　该问题的解决方案也简单，对于查询到数据库的空结果也缓存起来，但是给一个相对快过期的时间。有些同行可能又会问，这样不就会造成了数据不一致了么？一般有数据同步的方案像分布式缓存、后续会说的一主多从、CQRS，只要存在<strong>数据同步</strong>这几个字，那就意味着会存在数据一致性的问题，<strong>因此如果使用上述方案，对应的业务场景应允许容忍一定的数据不一致。</strong></p> <h2>不是所有慢查询都适用</h2> <p>　　一般来说，慢的查询都意味着比较吃资源的（CPU、磁盘I/O）。举个例子，假如某个查询功能需要3秒时间，串行查询的时候并没什么问题，我们继续假设这功能每秒大概QPS为100，那么在第一次查询结果返回之前，接下来的所有查询都应该穿透到数据库，也就意味着这几秒时间有300个请求到数据库，如果这个时候数据库CPU达到了100%，那么接下来的所有查询都会超时，也就是无法有第一个查询结果缓存起来，从而还是形成了缓存击穿。</p> </h1> <table style="width: 686px; height: 239px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col span="2" width="717"> <col width="237"></colgroup> <tbody> <tr> <td class="oa1" style="text-align: center" colspan="3" width="1670" height="57"> <p><span style="font-size: 16px"><strong>一主多从</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="717" height="41"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="717"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="237"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="717" height="100"> <p>分担数据库读压力</p> </td> <td class="oa6" style="text-align: center" width="717"> <p>应急调整方便，单以运维直接解决。</p> </td> <td class="oa6" style="text-align: center" width="237"> <p>高硬件成本</p> </td> </tr> <tr> <td class="oa7" style="text-align: center" width="717" height="63"> <p>还没找到更好的降低数据库负载的临时方案</p> </td> <td class="oa7" style="text-align: center" width="237"> <p>扩展性有限</p> </td> </tr> </tbody> </table> <p>　　常用的分担数据库压力还有一种常用做法，就是读写分离、一主多从。咱们都是知道关系型数据库天生是不具备分布式分片存储的，也就是不支持分布式写，但是它天然的支持分布式读。一主多从是部署多台从库只读实例，通过冗余主库的数据来分担读请求的压力，路由算法可有代码实现或者中间件解决，具体可以根据团队的运维能力与代码组件支持视情况选择。</p> <p>　　一主多从在还没找到根治方案前是一个非常好的应急解决方案，特别是在现在云服务的年代，扩展从库是一件非常方便的事情，而且一般情况只需要运维或者DBA解决就行，无需开发人员接入。当然这方案也有缺点，因为数据无法分片，所以主从的数据量完全冗余过去，也会导致高的硬件成本。从库也有其上限，从库过多了会主库的多线程同步数据的压力。</p> <p style="text-align: center"><img loading="lazy" decoding="async" src="http://img.555519.xyz/uploads3/20220510/22ba8c21f38f8fd79f25316e0150cdb6.jpg" alt="后端思维之数据库性能优化方案"></p> </h1> <p>　　NoSQL主要以下五种类型：<strong>键值型、文档型、列型、图型、搜素引擎，</strong>不同的存储系统直接决定了<strong>查找算法</strong>、<strong>存储数据结构</strong>，也应对了需要解决的不同的业务场景。NoSQL的出现也解决了关系型数据库之前面临的难题（性能、高并发、扩展性等）。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;例如，ElasticSearch的查找算法是倒排索引，可以用来代替关系型数据库的低性能、高消耗的Like搜索（全表扫描）。而Redis的Hash结构决定了时间复杂度为O(1)，还有它的内存存储，结合分片集群存储方式以至于可以支撑数十万QPS。</p> <p>　　因此本类型的方案主要有两种：<strong>CQRS、替换（选择）存储，</strong>这两种方案的最终本质基本是一样的主要使用合适存储来弥补关系型数据库的缺点，只不过切换过渡的方式会有点不一样。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0e8306a392dac5684167c6c35ab96fac.jpg" alt="后端思维之数据库性能优化方案"></p> </h1> <blockquote> <p>CQS（命令查询分离）指同一个对象中作为查询或者命令的方法，每个方法或者返回的状态，要么改变状态，但不能两者兼备</p> </blockquote> <table style="width: 772px; height: 298px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="755"> <col width="756"> <col width="259"></colgroup> <tbody> <tr> <td class="oa1" style="text-align: center" colspan="3" width="1769" height="53"> <p><span style="font-size: 16px"><strong>CQRS</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="755" height="53"> <p><strong>场景</strong></p> </td> <td class="oa4" style="text-align: center" width="756"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="259"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" width="755" height="95"> <p>需要保留关系型数据库的使用，又要使用NoSQL的高性能与可扩展性</p> </td> <td class="oa6" width="756"> <p>原应用改动范围比较小，兼容旧业务，只需要替换读的底层。</p> </td> <td class="oa6" width="259"> <p>高硬件成本</p> </td> </tr> <tr> <td class="oa7" width="755" height="95"> <p>允许非实时的数据场景</p> </td> <td class="oa8" width="756"> <p>即保留了关系型数据库的ACID特性，又使用NoSQL的可扩展性与高性能</p> </td> <td class="oa8" width="259"> <p>数据同步</p> </td> </tr> </tbody> </table> <p>　　讲解CQRS前得了解CQS，有些小伙伴看了估计还没不是很清晰，我这里用通俗的话解释：某个对象的数据访问的方法里，要么只是查询，要么只是写入（更新）。而CQRS（命令查询职责分离）基于CQS的基础上，用物理数据库来写入（更新），而用另外的存储系统来查询数据。因此我们在某些业务场景进行存储架构设计时，可以通过关系型数据库的ACID特性进行数据的更新与写入，用NoSQL的高性能与扩展性进行数据的查询处理，这样的好处就是关系型数据库和NoSQL的优点都可以兼得，同时对于某些业务不适于一刀切的替换存储的也可以有一个平滑的过渡。</p> <p>　　从代码实现角度来看，不同的存储系统只是调用对应的接口API，因此CQRS的难点主要在于如何进行数据同步。</p> </h1> <table style="width: 794px; height: 235px" border="0" cellspacing="0" cellpadding="0"> <colgroup> <col width="192"> <col width="189"> <col width="378"> <col width="495"> <col width="515"></colgroup> <tbody> <tr> <td class="oa1" style="text-align: center" colspan="5" width="1769" height="51"> <p><span style="font-size: 16px"><strong>CQRS实现方式</strong></span></p> </td> </tr> <tr> <td class="oa3" style="text-align: center" width="192" height="47"> <p><strong>方式</strong></p> </td> <td class="oa4" style="text-align: center" width="189"> <p><strong>实时性</strong></p> </td> <td class="oa4" style="text-align: center" width="378"> <p><strong>方案类型</strong></p> </td> <td class="oa4" style="text-align: center" width="495"> <p><strong>优点</strong></p> </td> <td class="oa4" style="text-align: center" width="515"> <p><strong>缺点</strong></p> </td> </tr> <tr> <td class="oa5" style="text-align: center" rowspan="2" width="192" height="91"> <p>推</p> </td> <td class="oa6" style="text-align: center" rowspan="2" width="189"> <p>高</p> </td> <td class="oa7" style="text-align: center" width="378"> <p>CDC（变更数据捕获）</p> </td> <td class="oa7" style="text-align: center" width="495"> <p>无业务侵入，解决多业务入口</p> </td> <td class="oa7" style="text-align: center" width="515"> <p>额外中间件</p> </td> </tr> <tr> <td class="oa8" style="text-align: center" width="378" height="44"> <p>领域事件</p> </td> <td class="oa8" style="text-align: center" width="495"> <p>可读性高</p> </td> <td class="oa8" style="text-align: center" width="515"> <p>需要在框架代码层面处理</p> </td> </tr> <tr> <td class="oa9" style="text-align: center" width="192" height="47"> <p>拉</p> </td> <td class="oa10" style="text-align: center" width="189"> <p>低</p> </td> <td class="oa7" style="text-align: center" width="378"> <p>调度任务定时同步</p> </td> <td class="oa7" style="text-align: center" width="495"> <p>同CDC</p> </td> <td class="oa7" style="text-align: center" width="515"> <p>物理删除无法识别，只能全量</p> </td> </tr> </tbody> </table> </div> <p>&nbsp;　　一般讨论到数据同步的方式主要是分<strong>推</strong>和<strong>拉：</strong></p> <p><strong></strong>推指的是由数据变更端通过直接或者间接的方式把数据变更的记录发送到接收端，从而进行数据的一致性处理，这种主动的方式优点是实时性高。</p> <p>　　拉指的是接收端定时的轮询数据库检查是否有数据需要进行同步，这种被动的方式从实现角度来看比推简单，因为推是需要数据变更端支持变更日志的推送的。</p> <p>　　而推的方式又分两种：CDC（变更数据捕获）和领域事件。对于一些旧的项目来说，某些业务的数据入口非常多，无法完整清晰的梳理清楚，这个时候CDC就是一种非常好的方式，只要从最底层数据库层面把变更记录取到就可。</p> <p>　　对于已经服务化的项目来说领域事件是一种比较舒服的方式，因为CDC是需要数据库额外开启功能或者部署额外的中间件，而领域事件则不需要，从代码可读性来看会更高，也比较开发人员的维护思维模式。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/2fa03a6bb0bc5fa1d8bb513c899c3cd7.jpg" alt="后端思维之数据库性能优化方案"></p> </h1> <p>　　因为从本质来看该模式与CQRS的核心本质是一样的，主要是要对NoSQL的优缺点有一个全面认识，这样才能在对应业务场景选择与判断出一个合适的存储系统。这里我像大家介绍一本书马丁.福勒《NoSQL精粹》，这本书我重复看了好几遍，也很好全面介绍各种NoSQL优缺点和使用场景。</p> <p>　　当然替换存储的时候，我这里也有个建议：加入一个中间版本，该版本做好数据同步与业务开关，数据同步要保证全量与增加的处理，随时可以重来，业务开关主要是为了后续版本的更新做的一个临时型的功能，主要避免后续版本更新不顺利或者因为版本更新时导致的数据不一致的情况出现。在跑了一段时间后，验证了两个不同的存储系统数据是一致的后，接下来就可以把数据访问层的底层调用替换了。如此一来就可以平滑的更新切换。</p> </h1> <p>　　本文到这里就把八大方案介绍完了，在这里再次提醒一句，每个方案都有属于它的应对场景，咱们只能根据业务场景选择对应的解决方案，没有通吃，没有银弹。</p> <p>　　这八个方案里，大部分都存在数据同步的情况，只要存在数据同步，无论是一主多从、分布式缓存、CQRS都好，都会有数据一致性的问题导致，因此这些方案更多适合一些只读的业务场景。当然有些写后既查的场景，可以通过过渡页或者广告页通过用户点击关闭切换页面的方式来缓解数据不一致性的情况。</p> <p>　　通过这篇文章我相信大家对数据库设计优化有了一个全面的认识，如果有更加的建议可以在下方评论反馈给给我。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-84367.htm">宠物食品厂招聘要求（宠物食品工厂招聘）</a></p>
                                        <p>下一个：<a href="/news/article-85089.htm">动物疫苗多少钱一支啊图片大全集高清（动物疫苗多少钱一支啊图片大全集高清图）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-6-node-share-links.htm" title="「3月6日」最高速度22.1M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月6日」最高速度22.1M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-clash-nyanpasu.htm" title="「3月7日」最高速度18.8M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月7日」最高速度18.8M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-clash-nyanpasu-node.htm" title="「3月29日」最高速度20.4M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月29日」最高速度20.4M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-24-linux-clash-nyanpasu.htm" title="「3月24日」最高速度20.1M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月24日」最高速度20.1M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-node-share.htm" title="「3月5日」最高速度19.8M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月5日」最高速度19.8M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-83647.htm" title="动物疫苗管理法律法规最新版本全文（动物疫苗政策）">动物疫苗管理法律法规最新版本全文（动物疫苗政策）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-3-linux-clash-nyanpasu.htm" title="「3月3日」最高速度21.5M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「3月3日」最高速度21.5M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-74686.htm" title="OpenSSL版本升级，重编译nginx。ssl自定义证书，https配置。">OpenSSL版本升级，重编译nginx。ssl自定义证书，https配置。</a></li>
                        <li class="py-2"><a href="/news/article-67484.htm" title="猫驱虫一次要多少钱左右（猫猫驱虫多少钱）">猫驱虫一次要多少钱左右（猫猫驱虫多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-78785.htm" title="宠物粮厂家排名前十有哪些（宠物粮生产基地都在哪）">宠物粮厂家排名前十有哪些（宠物粮生产基地都在哪）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Us Section -->
    </main><!-- End #main -->
    <!-- ======= Footer ======= -->
    <footer id="footer" class="footer">
        <div class="container mt-4">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                Clash Nyanpasu Node节点订阅站 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <!-- End Footer -->
    <a href="#" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/purecounter/purecounter_vanilla.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/php-email-form/validate.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>