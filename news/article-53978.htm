<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnyanpasunode.github.io/news/article-53978.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>19-Spring AOP源码分析-代理对象调用目标方法</title>
        <meta name="description" content="1-Spring架构源码分析-Spring源码搭建 2-Spring架构源码分析-SSM框架说明 3-Spring架构源码分析-spring体系 4-Spring架构源码分析-Spring IOC机制" />
        <link rel="icon" href="/assets/website/img/clashnyanpasunode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Nyanpasu Node节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnyanpasunode.github.io/news/article-53978.htm" />
    <meta property="og:site_name" content="Clash Nyanpasu Node节点订阅站" />
    <meta property="og:title" content="19-Spring AOP源码分析-代理对象调用目标方法" />
    <meta property="og:image" content="https://clashnyanpasunode.github.io/uploads/20240728-1/392ab026d06c58058c1c71c76a671b5e.webp" />
        <meta property="og:release_date" content="2025-02-10T07:36:36" />
    <meta property="og:updated_time" content="2025-02-10T07:36:36" />
        <meta property="og:description" content="1-Spring架构源码分析-Spring源码搭建 2-Spring架构源码分析-SSM框架说明 3-Spring架构源码分析-spring体系 4-Spring架构源码分析-Spring IOC机制" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="19-Spring AOP源码分析-代理对象调用目标方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,600;1,700&family=Montserrat:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&family=Raleway:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/clashnyanpasunode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/clashnyanpasunode/main.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FW6BH5KXK9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FW6BH5KXK9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
    <header id="header" class="header d-flex align-items-center">
        <div class="container-fluid container-xl d-flex align-items-center justify-content-between">
            <a href="/" class="logo d-flex align-items-center xcblog-blog-logo">
                                <span><p>ClashNyanpasu<span>Node</span></p></span>
                            </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </nav><!-- .navbar -->
            <i class="mobile-nav-toggle mobile-nav-show bi bi-list"></i>
            <i class="mobile-nav-toggle mobile-nav-hide d-none bi bi-x"></i>
        </div>
    </header><!-- End Header -->
    <!-- End Header -->
    <!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <div class="breadcrumbs">
            <div class="page-header d-flex align-items-center" style="background-image: url('');">
                <div class="container position-relative">
                    <div class="row d-flex justify-content-center">
                        <div class="col-lg-6 text-center">
                            <h1>19-Spring AOP源码分析-代理对象调用目标方法</h1>
                        </div>
                    </div>
                </div>
            </div>
            <nav>
                <div class="container">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </nav>
        </div><!-- End Breadcrumbs -->
        <!-- ======= About Us Section ======= -->
        <section id="about" class="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9 xcblog-blog-list">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> </h1> <ol> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125924521"  rel="nofollow">1-Spring架构源码分析-Spring源码搭建</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125967417"  rel="nofollow">2-Spring架构源码分析-SSM框架说明</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125984425"  rel="nofollow">3-Spring架构源码分析-spring体系</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125984529"  rel="nofollow">4-Spring架构源码分析-Spring IOC机制设计思想和源码解读</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126006722"  rel="nofollow">5-Spring架构源码分析-Spring IOC之 Spring 统一资源加载策略</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126023517"  rel="nofollow">6-Spring架构源码分析-IoC 之加载 BeanDefinition</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126065441"  rel="nofollow">7-Spring架构源码分析-IoC 之注册 BeanDefinitions</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126339548"  rel="nofollow">8-Spring架构源码分析-IoC 之解析Bean：解析 import 标签</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126339562"  rel="nofollow">9-Spring架构源码分析-IoC 之解析 bean 标签：开启解析进程</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126358220"  rel="nofollow">10-Spring架构源码分析-IoC 之解析 bean标签：BeanDefinition</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126358236"  rel="nofollow">11-Spring架构源码分析-IoC 之注册解析的 BeanDefinitions</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126396450"  rel="nofollow">12-Spring架构源码分析-IoC 之装载 BeanDefinitions 总结</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126396493"  rel="nofollow">13-Spring架构源码分析-IoC 之开启 Bean 的加载</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126474215"  rel="nofollow">14-Spring架构源码分析-IoC 之加载 Bean：总结</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126496936"  rel="nofollow">15-Spring架构源码分析-Spring代理与AOP</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497008"  rel="nofollow">16-Spring AOP源码分析-@EnableAspectJAutoProxy和AspectJAutoProxyRegistrar</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497019"  rel="nofollow">17-Spring AOP源码分析-AnnotationAwareAspectJAutoProxyCreator</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497035"  rel="nofollow">18-Spring AOP源码分析-AOP与BeanPostProcessor处理器</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126516950"  rel="nofollow">19-Spring AOP源码分析-代理对象调用目标方法</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126595980"  rel="nofollow">20-spring mvc设计思想和源码解读-spring mvc 功能特性</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654411"  rel="nofollow">21-mvc 体系结构源码详解</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654419"  rel="nofollow">22-Spring MVC源码跟踪</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654422"  rel="nofollow">23-Spring事务源码分析</a></li> </ol> <h5> <a id="_25" rel="nofollow"></a>代理对象调用目标方法</h5> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">/**      * 加法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 减法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 除法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 乘法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TulingCalculate</span> <span class="token keyword">implements</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> numA<span class="token operator">+</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">-</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">/</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">*</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">int</span> retVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Calculate</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numA<span class="token punctuation">,</span>numB<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//int retVal = this.add(numA,numB);</span>         <span class="token keyword">return</span> retVal<span class="token operator">%</span>numA<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><em><strong>*代理对象调用源代码:*</strong></em></p> <pre><code class="prism language-java">	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{<!-- --></span> 		<span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">;</span> 		<span class="token class-name">Object</span> oldProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  		<span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span> 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  		<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span> 		   			<span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>                          <span class="token comment">//是否暴露代理对象</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把代理对象添加到TheadLocal中</span> 				oldProxy <span class="token operator">=</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 				setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>              <span class="token comment">//获取被代理对象</span> 			target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			    <span class="token comment">//设置被代理对象的class</span> 				targetClass <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//把增强器转为方法拦截器链</span> 			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  		    <span class="token comment">//若方法拦截器链为空</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token comment">//通过反射直接调用目标方法</span> 				<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> 				retVal <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//创建方法拦截器调用链条</span> 				invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">//执行拦截器链</span> 				retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//获取方法的返回值类型</span> 			<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span> 					returnType <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 					<span class="token operator">!</span><span class="token class-name">RawTargetAccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//如果方法返回值为 this，即 return this; 则将代理对象 proxy 赋值给 retVal </span> 				retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token comment">//如果返回值类型为基础类型，比如 int，long 等，当返回值为 null，抛出异常</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> <span class="token class-name">Void</span><span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span> 						<span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">return</span> retVal<span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Must have come from TargetSource.</span> 				targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Restore old proxy.</span> 				<span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisedSupport</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 把增强器中转为方法拦截器链 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//从缓存中获取缓存key 第一次肯定获取不到</span> 		<span class="token class-name">MethodCacheKey</span> cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">//通过cacheKey获取缓存值</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token comment">//从缓存中没有获取到</span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		    <span class="token comment">//获取所有的拦截器</span> 			cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorChainFactory<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 					<span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		    <span class="token comment">//放入缓存.....</span> 			<span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> cached<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisorChainFactory</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span> 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 			<span class="token class-name">Advised</span> config<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	    <span class="token comment">//创建拦截器集合长度是增强器的长度</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> actualClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> targetClass <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> hasIntroductions <span class="token operator">=</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token class-name">AdvisorAdapterRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">GlobalAdvisorAdapterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//遍历所有的增强器集合</span> 		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token comment">//判断增强器是不是PointcutAdvisor</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把增强器转为PointcutAdvisor</span> 				<span class="token class-name">PointcutAdvisor</span> pointcutAdvisor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token comment">//通过方法匹配器对增强器进行匹配</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">MethodMatcher</span> mm <span class="token operator">=</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token comment">//能够匹配</span> 					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> method<span class="token punctuation">,</span> actualClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 						<span class="token comment">//把增强器转为拦截器</span> 						<span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">isRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 							<span class="token comment">// Creating a new object instance in the getInterceptors() method</span> 							<span class="token comment">// isn't a problem as we normally cache created chains.</span> 							<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 								interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 							<span class="token punctuation">}</span> 						<span class="token punctuation">}</span> 						<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 							interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token punctuation">}</span> 					<span class="token punctuation">}</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">IntroductionAdvisor</span> ia <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 					interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 				interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span>  		<span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> </code></pre> <p>------------------------------------------------------------ 完 --------------------------------------------------------------------</p> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <ol> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-53977.htm">java多线程学习2，线程的属性</a></p>
                                        <p>下一个：<a href="/news/article-54532.htm">Java调用REST接口（get，post请求方法）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-20-free-node-subscribe.htm" title="「1月20日」最高速度19.9M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「1月20日」最高速度19.9M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-40827.htm" title="SpringMVC访问静态资源的三种方式">SpringMVC访问静态资源的三种方式</a></li>
                        <li class="py-2"><a href="/news/article-50784.htm" title="二手小型饲料颗粒机500元（二手大型饲料颗粒机）">二手小型饲料颗粒机500元（二手大型饲料颗粒机）</a></li>
                        <li class="py-2"><a href="/news/article-52908.htm" title="Python while循环如何工作？">Python while循环如何工作？</a></li>
                        <li class="py-2"><a href="/news/article-55641.htm" title="动物疫苗研究所电话（动物医院打疫苗多少钱）">动物疫苗研究所电话（动物医院打疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-39337.htm" title="宠物粮食行业发展前景如何呢知乎（宠物粮食市场前景）">宠物粮食行业发展前景如何呢知乎（宠物粮食市场前景）</a></li>
                        <li class="py-2"><a href="/news/article-42817.htm" title="动物疫苗怎么注射视频 动物疫苗怎么注射视频教程">动物疫苗怎么注射视频 动物疫苗怎么注射视频教程</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-24-clash-nyanpasu-node.htm" title="「1月24日」最高速度18.2M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接">「1月24日」最高速度18.2M/S，2025年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-36881.htm" title="动物疫苗证明怎么写（动物疫苗证明怎么写的）">动物疫苗证明怎么写（动物疫苗证明怎么写的）</a></li>
                        <li class="py-2"><a href="/news/article-45289.htm" title="win11系统如何创建虚拟磁盘">win11系统如何创建虚拟磁盘</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Us Section -->
    </main><!-- End #main -->
    <!-- ======= Footer ======= -->
    <footer id="footer" class="footer">
        <div class="container mt-4">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                Clash Nyanpasu Node节点订阅站 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <!-- End Footer -->
    <a href="#" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/purecounter/purecounter_vanilla.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/php-email-form/validate.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>