<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnyanpasunode.github.io/news/article-24614.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Spring Boot教程 | 第八篇：Spring Boot整合knife4j（swagger-bootstrap-ui）实现自动API文档</title>
        <meta name="description" content="一、简介 Spring Boot完整教程 | 主页及目录 swagger 在前后端分离的项目中，接口文档是前后端沟通联调的重要工具。一般我们后端人员会使用接口文档工具（如小幺鸡甚至Excel等）编写接" />
        <link rel="icon" href="/assets/website/img/clashnyanpasunode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,600;1,700&family=Montserrat:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&family=Raleway:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/clashnyanpasunode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/clashnyanpasunode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/clashnyanpasunode/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/clashnyanpasunode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/clashnyanpasunode/main.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FW6BH5KXK9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FW6BH5KXK9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
    <header id="header" class="header d-flex align-items-center">
        <div class="container-fluid container-xl d-flex align-items-center justify-content-between">
            <a href="/" class="logo d-flex align-items-center">
                <p>ClashNyanpasu<span>Node</span></p>
            </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">链接</a></li>
                </ul>
            </nav><!-- .navbar -->
            <i class="mobile-nav-toggle mobile-nav-show bi bi-list"></i>
            <i class="mobile-nav-toggle mobile-nav-hide d-none bi bi-x"></i>
        </div>
    </header><!-- End Header -->
    <!-- End Header -->
    <!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <div class="breadcrumbs">
            <div class="page-header d-flex align-items-center" style="background-image: url('');">
                <div class="container position-relative">
                    <div class="row d-flex justify-content-center">
                        <div class="col-lg-6 text-center">
                            <h1>Spring Boot教程 | 第八篇：Spring Boot整合knife4j（swagger-bootstrap-ui）实现自动API文档</h1>
                        </div>
                    </div>
                </div>
            </div>
            <nav>
                <div class="container">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </nav>
        </div><!-- End Breadcrumbs -->
        <!-- ======= About Us Section ======= -->
        <section id="about" class="about">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9 xcblog-blog-list">
                                          				  				  				<div id="content_views" class="htmledit_views"> <h2>一、简介</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/tuoyun6647/article/details/95627989"  rel="nofollow">Spring Boot完整教程 | 主页及目录</a></p> <p><strong>swagger</strong></p> <p>在前后端分离的项目中，接口文档是前后端沟通联调的重要工具。一般我们后端人员会使用接口文档工具（如小幺鸡甚至Excel等）编写接口文档。对于后端开发来说，编写这个json格式的接口说明，本身也是有一定负担的工作，特别是在后面持续迭代开发的时候，往往会忽略更新这个接口说明，直接更改代码。久而久之，接口文档由于缺乏维护，也和实际项目渐行渐远，甚至失去了参考意义。（Ps：部门目前需要对外发布的接口文档以及需要特殊描述的接口仍使用工具进行人工编写）</p> <p>因此我们希望引入某项工具，可以扫描相关的代码，动态生成与代码一致的接口说明。基于此背景，出现了Swagger 框架。Swagger定义了一套接口规范，通过这套规范，你只需要按照它的规范去定义接口及接口相关的信息。再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等等。</p> <p><strong>springfox-swagger</strong></p> <p>springfox-swagger是一套基于Swagger（结合Spring与Swagger），帮助开发者自动生成API文档的工具。由于UI页面不是很清晰友好，因此国人基于springfox-swagger打造出了swagger-bootstrap-ui。</p> <p><strong>swagger-bootstrap-ui</strong></p> <p>swagger-bootstrap-ui是基于springfox-swagger的增强UI实现，以文档说明和在线调试为核心，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验。Swagger-Bootstrap-UI 替换Swagger 默认的UI实现左右菜单风格的Swagger-UI ，让其看起来更清晰明了。</p> <p><strong>knife4j</strong></p> <p>随着项目略显臃肿，作者将项目正式更名为<strong>knife4j</strong>,并做了调整改进。</p> <p>（一句话总结就是：<strong>knife4j</strong>是为Java MVC框架集成<strong>Swagger</strong>生成Api文档的增强解决方案）</p> <p>作者原文如下:“但是随着项目的发展,面对越来越多的个性化需求,不得不编写后端Java代码以满足新的需求,在swagger-bootstrap-ui的1.8.5~1.9.6版本之间,采用的是后端Java代码和Ui都混合在一个Jar包里面的方式提供给开发者使用.这种方式虽说对于集成swagger来说很方便,只需要引入jar包即可,但是在微服务架构下显得有些臃肿。因此,项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端”</p> <p>官网地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://doc.xiaominfo.com/knife4j/"  rel="nofollow">https://doc.xiaominfo.com/knife4j/</a></p> <h2>二、搭建</h2> <h3>2.1使用2.0.2版本</h3> <p>引入pom依赖</p> <pre><code class="language-java">        &lt;!-- knife4j（swagger）依赖 --&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;             &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;             &lt;!--在引用时请在maven中央仓库搜索最新版本号--&gt;             &lt;version&gt;2.0.2&lt;/version&gt;         &lt;/dependency&gt;</code></pre> <p>新建config包，创建swagger的配置类</p> <p><img fetchpriority="high" decoding="async" alt="" height="724" src="http://img.555519.xyz/uploads3/20220829/9be0f63564768e3c1081dcceefda4cf6.jpg"></p> <p>配置类代码如下（注意按照自己的项目配置包扫描路径）：</p> <pre><code class="language-java">package com.kcsm.training.bootdemo.config;  import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2;  @Configuration @EnableSwagger2 @EnableKnife4j @Import(BeanValidatorPluginsConfiguration.class) public class SwaggerConfiguration {       @Bean     public Docket defaultApi2() {         Docket docket=new Docket(DocumentationType.SWAGGER_2)                 .apiInfo(apiInfo())                 //分组名称                 .groupName("1.0版本")                 .select()                 //这里指定Controller扫描包路径(项目路径也行)                 .apis(RequestHandlerSelectors.basePackage("com.kcsm.training.bootdemo.controller"))                 .paths(PathSelectors.any())                 .build();         return docket;     }     private ApiInfo apiInfo() {         return new ApiInfoBuilder()                 .title("接口说明")                 .description("DEMO服务接口说明")                 .termsOfServiceUrl("http://localhost:88888/")                 .version("1.0")                 .build();     } }</code></pre> <p>&nbsp;启动项目成功后，访问<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/doc.html"  rel="nofollow">http://localhost:8080/doc.html</a>，可访问即说明引入及配置成功</p> <p><img decoding="async" alt="" height="655" src="http://img.555519.xyz/uploads3/20220829/dd9003935a53182bb7a7ca3aaf72b87f.jpg"></p> <p>上述配置已允许开启了增强功能，开启增强功能（显示作者信息，排序等）需要在打开的页面上进行勾选方才生效</p> <p><img decoding="async" alt="" height="476" src="http://img.555519.xyz/uploads3/20220829/929db780ee3348955a484a6950bd4120.jpg"></p> <h3>2.2 使用2.0.7以上版本</h3> <p>特别说明：使用Knife4j2.0.6及以上的版本，Spring Boot的版本必须大于等于<code>2.2.x</code></p> <p>请直接按照官网步骤搭建完成后，学习下一节的基本使用和实际项目中的使用方法，官网地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://doc.xiaominfo.com/knife4j/documentation/get_start.html"  rel="nofollow">https://doc.xiaominfo.com/knife4j/documentation/get_start.html</a></p> <h2>三、基本使用</h2> <p>3.1 项目常用注解使用</p> <p>@Api()：用于类的说明</p> <p>@ApiOperation()：用于方法的说明</p> <p>@ApiOperationSupport()：（knife4j增加特性）用于接口方法排序，作者信息描述等。</p> <p>@ApiImplicitParam()：对单个参数的说明</p> <p>@ApiModel()：用于描述一个数据模型的信息，即我们常用的实体、VO类、DTO类等描述</p> <p>@ApiModelProperty()：用于描述数据模型的属性信息</p> <p>@ApiIgnore：自动生成接口说明时忽略</p> <p>下面以“根据性别查找所有学生”接口为例进行说明，我们需要对类进行描述、对方法进行描述、对请求参数进行描述、对返回的数据进行描述，完整代码如下：</p> <p>controller层</p> <pre><code class="language-java">package com.kcsm.training.bootdemo.controller;  import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport; import com.github.xiaoymin.knife4j.annotations.ApiSort; import com.kcsm.training.bootdemo.common.JsonResult; import com.kcsm.training.bootdemo.controller.vo.GetParaVo; import com.kcsm.training.bootdemo.entity.Student; import com.kcsm.training.bootdemo.service.StudentService; import io.swagger.annotations.Api; import io.swagger.annotations.ApiImplicitParam; import io.swagger.annotations.ApiOperation; import org.springframework.data.repository.query.Param; import org.springframework.web.bind.annotation.*; import springfox.documentation.annotations.ApiIgnore;  import javax.annotation.Resource; import java.util.List;  /**  * 学生信息控制类  */  @Api(tags = "学生信息接口") @RestController @RequestMapping(value = "student") @ApiSort(1) public class StudentController {     @Resource(name="studentServiceImpl")     StudentService studentService;      /**      * 根据性别查询学生信息      *      * @author lqk      * @param  gender [String]性别      * @return java.util.List&lt;com.kcsm.training.bootdemo.entity.Student&gt;      * @date   2019/7/10 9:16      */     @RequestMapping(value = "v1/jpatest",method = RequestMethod.GET)     @ApiOperation(value = "根据性别查找所有学生")     @ApiOperationSupport(order=1,author ="陆启坤")     @ApiImplicitParam(name = "gender", value = "性别",required = true,dataType = "String", defaultValue = "male")     public List&lt;Student&gt; findAllByGender(String gender){         return studentService.findAllByGender(gender);     }  }</code></pre> <p>返回的数据模型（即为学生实体类）</p> <pre><code class="language-java">package com.kcsm.training.bootdemo.entity;  import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import org.hibernate.annotations.GenericGenerator;  import javax.persistence.*;  /**  * 学生实体类  */ @Entity @Table(name = "STUDENT") @Data @ApiModel("学生实体类") public class Student {      /**      * 主键      */     @Id     @GeneratedValue(generator = "guidGenerator")     @GenericGenerator(name = "guidGenerator", strategy = "uuid")     @Column(name = "ID", unique = true, nullable = false, length = 32)     @ApiModelProperty(value = "主键")     private String id;      @Column(name="NAME",length=50)     @ApiModelProperty(value = "姓名",example="张三")     private String name;      @Column(name="AGE")     @ApiModelProperty(value = "年龄")     private Integer age;      /**      * 性别，male：男性，female：女性      */     @Column(name="GENDER",length=10)     @ApiModelProperty(value = "性别(male：男性，female：女性)",example = "male")     private String gender;  }</code></pre> <p>显示效果如下</p> <p><img loading="lazy" decoding="async" alt="" height="724" src="http://img.555519.xyz/uploads3/20220829/aa91962cc702f104ac26bcfbd9d53799.jpg"></p> <p>同时可直接进行接口调试</p> <p><img loading="lazy" decoding="async" alt="" height="546" src="http://img.555519.xyz/uploads3/20220829/1463a1b909beb00895acd6bcc38d0c8b.jpg"></p> <p><span style="color:#f33b45;">注意当使用@RequestMapping，而不指定请求类型时，将自动生成多个接口说明（get、post、delete等），对于不想生成说明的类或方法，使用@ApiIgnore注解即可屏蔽</span></p> <pre><code>    @ApiIgnore     @RequestMapping(value = "v1/findByGenderAndName")     public List&lt;Student&gt; findByGenderAndName(String gender,String name){         return studentService.findByGenderAndName(gender,name);     }</code></pre> <h2>四、项目中常用使用方法</h2> <p>在我们实际项目中，在请求参数较多的情况下我们通常会将请求参数封装成VO类，在返回前端时，我们一般会定义一个返回类的数据模型JsonResult或者ReturnData等，此种情况只需在数据模型使用@ApiModel()、@ApiModelProperty()等对类及属性进行说明，即可自动生成接口说明。下面使用"根据性别以及姓名查找所有学生"接口进行说明</p> <p><img loading="lazy" decoding="async" alt="" height="627" src="http://img.555519.xyz/uploads3/20220829/b556fb6a492342bb6541593a80038527.jpg"></p> <p>封装请求参数模型GetParaVo</p> <pre><code>package com.kcsm.training.bootdemo.controller.vo;  import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.Data;  @Data @ApiModel("获取学生信息参数VO类") public class GetParaVo {     @ApiModelProperty(value = "性别(male：男性，female：女性)",required = true)     String gender;     @ApiModelProperty(value = "姓名",required = true)     String name; }</code></pre> <p>封装返回数据模型JsonResult（根据项目习惯设置，保证传入数据模型类型即可）</p> <pre><code>package com.kcsm.training.bootdemo.common;  import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty;  import java.util.List;  /**  * @Description: 接口请求返回数据模型  *   * @author: lqk  * @date: 2018年5月15日 上午11:55:24  */ @ApiModel("返回信息数据模型") public class JsonResult&lt;T&gt; { 	/** 	 * 状态码 	 */ 	@ApiModelProperty(value = "状态码(200：成功、500：失败、10000段参数错误、20000段业务错误)") 	private int state;  	/** 	 * 执行信息 	 */ 	@ApiModelProperty(value = "执行信息") 	private String msg;  	/** 	 * 传输的数据 	 */ 	@ApiModelProperty(value = "返回数据") 	private T data;  	// ------------------- 成功、失败返回码-----------------------/ 	/** 	 * 执行成功状态 	 */ 	private static final int SUCCESS = 200;  	/** 	 * 执行失败状态 	 */ 	private static final int ERROR = 500;  	// ------------------- 参数错误返回码：10001-19999-----------------/ 	/** 	 * 参数为空 	 */ 	public static final int PARAM_IS_BLANK = 10001;  	/** 	 * 参数类型错误 	 */ 	public static final int PARAM_TYPE_ERROR = 10002;  	/** 	 * 参数缺失 	 */ 	public static final int PARAM_NOT_COMPLETE = 10003;  	// -------------------登录注册错误：20001-29999-----------------/ 	/** 	 * 用户未登录 	 */ 	public static final int USER_NOT_LOGGED_IN = 20001;  	/** 	 * 用户不存在 	 */ 	public static final int USER_NOT_EXIST = 20002;  	/** 	 * 用户已存在 	 */ 	public static final int USER_HAS_EXISTED = 20003;  	/** 	 * 账号密码错误 	 */ 	public static final int USER_LOGIN_ERROR = 20004;  	/** 	 * 账号已被禁用 	 */ 	public static final int USER_ACCOUNT_FORBIDDEN = 20005;  	// -------------------业务错误：20001-29999-----------------/ 	/** 	 * 业务错误码 	 */ 	public static final int BUSINESS_ERROR_CODE = 20001; 	 	/** 	 * 业务成功，通知失败 	 */ 	public static final int NOTICE_ERROR_BUSINESS_SUCCESS = 3001; 	/** 	 * 成功消息 	 */ 	public static final String MESSAGE_SUCCESS = "执行成功！";  	public JsonResult() { 		this.state = SUCCESS; 		this.msg = "执行成功！"; 	}  	public JsonResult(int state, String msg, T data) { 		this.state = state; 		this.msg = msg; 		this.data = data; 	}  	public JsonResult(T data) { 		this.state = SUCCESS; 		this.msg = "获取数据成功！"; 		this.data = data; 	}  	public JsonResult(Exception ex) { 		this.state = ERROR; 		this.msg = ex.getMessage(); 	}  	public JsonResult(RuntimeException ex) { 		this.state = ERROR; 		this.msg = ex.getMessage(); 	}  	@Override 	public String toString() { 		return "JsonResult [state=" + state + ", msg=" + msg + ", data=" + data + "]"; 	}  }</code></pre> <p>controller方法</p> <pre><code>    @ApiOperation("根据性别以及姓名查找所有学生")     @ApiOperationSupport(order=2)     @GetMapping(value = "v1/findByGenderAndName" )     public JsonResult&lt;Student&gt; findByGenderAndName(GetParaVo getParaVo){         String gender=getParaVo.getGender();         String name = getParaVo.getName();         return  new JsonResult(studentService.findByGenderAndName(gender,name));     }</code></pre> <p>效果如下，通过对封装的参数模型、返回数据模型进行注解说明后，能自动生成相应的接口说明：</p> <p><img loading="lazy" decoding="async" alt="" height="428" src="http://img.555519.xyz/uploads3/20220829/466f08df6f84cce0229fb9d771041022.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="727" src="http://img.555519.xyz/uploads3/20220829/25888d3785b963336a4d3f10d3b7ee34.jpg"></p> <h2></h2> <h2>五、进阶使用</h2> <h2>4.1 接口排序（<strong>knife4j新增的典型</strong>特性）</h2> <p id="tags分组排序">类说明，tags的分组排序</p> <pre><code class="language-java">@Api(tags = "学生信息接口") @RestController @RequestMapping(value = "student") @ApiSort(1) public class StudentController{  }</code></pre> <p>tags下的接口排序</p> <pre><code class="language-java">    /**      * 根据性别查询学生信息      *      * @author lqk      * @param  gender [String]性别      * @return java.util.List&lt;com.kcsm.training.bootdemo.entity.Student&gt;      * @date   2019/7/10 9:16      */     @RequestMapping(value = "v1/jpatest",method = RequestMethod.GET)     @ApiOperation("根据性别查找所有学生")     @ApiOperationSupport(order=1,author ="陆启坤")     @ApiImplicitParam(name = "gender", value = "性别",required = true,dataType = "String", defaultValue = "男")     public List&lt;Student&gt; findAllByGender(String gender){         return studentService.findAllByGender(gender);     }</code></pre> <h2>4.2权限控制（<strong>knife4j新增的典型</strong>特性）</h2> <p>当我们部署系统到生产系统,为了接口安全,需要屏蔽所有Swagger的相关资源，只需在application.properties或者application.yml配置文件中配置</p> <pre><code>knife4j.production=true</code></pre> <p>即可屏蔽所有Swagger页面权限</p> <p><img loading="lazy" decoding="async" alt="" height="123" src="http://img.555519.xyz/uploads3/20220829/b6fba2fa0527dca708bf69698e457643.jpg"></p> <p>另外也可以提供一个登陆界面的功能,开发者输入用户名和密码来控制界面的访问,只有知道用户名和密码的人才能访问此文档。如在application.properties或者application.yml配置文件中配置</p> <pre><code>## 开启Swagger的Basic认证功能,默认是false knife4j.basic.enable=true ## Basic认证用户名 knife4j.basic.username=admin ## Basic认证密码 knife4j.basic.password=123321</code></pre> <p><img loading="lazy" decoding="async" alt="" height="235" src="http://img.555519.xyz/uploads3/20220829/601330a2bb74529098ea7c6b1d8b382d.jpg"></p> <p><span style="color:#f33b45;">其他更多使用可参考：</span><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://doc.xiaominfo.com/knife4j/documentation/changelog.html"  rel="nofollow">https://doc.xiaominfo.com/knife4j/documentation/changelog.html</a></p> <h2>五、常用注解说明</h2> <p id="api"><strong>@Api</strong></p> <p>作用在类上，用来标注该类具体实现内容。参数：<br /> tags：类标签，一般用来写类的名称或作用。（常用）<br /> description：可描述描述该类作用。</p> <p><strong>@ApiOperation()</strong></p> <p>用于方法的说明，参数：</p> <p>value ：方法说明（常用）</p> <p>notes ：注释说明</p> <p>httpMethod ：&nbsp;说明这个方法被请求的方式</p> <p>response ：方法的返回值的类型</p> <p><strong>@ApiOperationSupport()</strong></p> <p>（knife4j增加特性）用于接口方法排序，作者信息描述等。参数：</p> <p>order：排序</p> <p>author：作者信息</p> <p><strong>@ApiImplicitParam()</strong></p> <p>对单个参数的说明，参数：</p> <p>1. name ：参数名。<br /> 2. value ： 参数的具体意义，作用。（常用）<br /> 3. required ： 参数是否必填。&nbsp;（常用）<br /> 4. dataType ：参数的数据类型。&nbsp;（常用）<br /> 5. paramType ：查询参数类型，这里有几种形式：</p> <p>类型&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 作用<br /> path&nbsp; &nbsp; &nbsp; 以地址的形式提交数据<br /> query&nbsp;&nbsp; &nbsp;直接跟参数完成自动映射赋值<br /> body&nbsp; &nbsp; &nbsp; 以流的形式提交 仅支持POST<br /> header&nbsp;&nbsp;参数在request headers 里边提交<br /> form&nbsp; &nbsp; &nbsp; 以form表单的形式提交 仅支持POST</p> <p><strong>@ApiModel()</strong></p> <p>用于描述一个数据模型的信息，即我们常用的实体、VO类、DTO类等描述。参数：<br /> value ： 数据模型名称。（常用）</p> <p>description:具体描述</p> <p>parent：父类</p> <p><strong>@ApiModelProperty()：</strong></p> <p>用于描述数据模型的属性信息，参数：</p> <p>value：字段说明&nbsp;（常用）<br /> name：重写属性名字<br /> dataType：重写属性类型<br /> required：是否必填&nbsp;（常用）<br /> example：举例说明&nbsp;（常用）<br /> hidden：隐藏</p> <p><strong>@ApiIgnore</strong></p> <p>方法自动生成接口说明时忽略</p> <p><strong>@JsonIgnore</strong></p> <p>字段自动生成接口说明时忽略，即忽略某一个字段</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24153.htm">昆明哪里可以免费领养宠物猫（昆明市宠物猫领养）</a></p>
                                        <p>下一个：<a href="/news/article-24615.htm">动物疫苗的正确使用方法有哪些种类（动物疫苗的正确使用方法有哪些种类图片）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-8-25-node-share-links.htm" title="「8月25日」最高速度18.9M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「8月25日」最高速度18.9M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-clash-nyanpasu-node.htm" title="「11月23日」最高速度21.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「11月23日」最高速度21.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-subscribe-node.htm" title="「11月5日」最高速度19.4M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「11月5日」最高速度19.4M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-free-node-subscribe-links.htm" title="「11月25日」最高速度22.2M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「11月25日」最高速度22.2M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-5-clash-nyanpasu.htm" title="「8月5日」最高速度19.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「8月5日」最高速度19.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-27-clash-nyanpasu-node.htm" title="「10月27日」最高速度22.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「10月27日」最高速度22.3M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21844.htm" title="猫一般养多久认主人（猫养多久才认主人）">猫一般养多久认主人（猫养多久才认主人）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-13-clash-nyanpasu-node.htm" title="「9月13日」最高速度22.1M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「9月13日」最高速度22.1M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-12-free-subscribe-node.htm" title="「8月12日」最高速度20.7M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「8月12日」最高速度20.7M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-3-free-node-subscribe-links.htm" title="「9月3日」最高速度22.7M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接">「9月3日」最高速度22.7M/S，2024年Clash Nyanpasu每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Us Section -->
    </main><!-- End #main -->
    <!-- ======= Footer ======= -->
    <footer id="footer" class="footer">
        <div class="container mt-4">
            <div class="copyright">
                Clash Nyanpasu Node节点订阅站 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <!-- End Footer -->
    <a href="#" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/purecounter/purecounter_vanilla.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/swiper/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasunode/php-email-form/validate.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/clashnyanpasunode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>